{"version":3,"file":"static/js/395.d2924e3f.chunk.js","mappings":"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","sources":["../node_modules/antd-mobile-icons/es/DownOutline.js","../node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["import * as React from \"react\";\n\nfunction DownOutline(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 48 48\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\"\n  }, props, {\n    style: Object.assign({\n      verticalAlign: '-0.125em'\n    }, props.style),\n    className: ['antd-mobile-icon', props.className].filter(Boolean).join(' ')\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"DownOutline-DownOutline\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"DownOutline-\\u77E9\\u5F62\",\n    fill: \"#FFFFFF\",\n    opacity: 0,\n    x: 0,\n    y: 0,\n    width: 48,\n    height: 48\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5.11219264,16.3947957 L22.6612572,34.5767382 L22.6612572,34.5767382 C23.2125856,35.1304785 24.0863155,35.1630514 24.6755735,34.6744571 L24.7825775,34.5767382 L42.8834676,16.3956061 C42.9580998,16.320643 43,16.2191697 43,16.1133896 L43,12.9866673 C43,12.7657534 42.8209139,12.5866673 42.6,12.5866673 C42.4936115,12.5866673 42.391606,12.6290496 42.316542,12.7044413 L23.7816937,31.3201933 L23.7816937,31.3201933 L5.6866816,12.7237117 C5.53262122,12.5653818 5.27937888,12.5619207 5.121049,12.7159811 C5.04365775,12.7912854 5,12.8946805 5,13.0026627 L5,16.1170064 C5,16.2206403 5.04022164,16.3202292 5.11219264,16.3947957 Z\",\n    id: \"DownOutline-down\",\n    fill: \"currentColor\",\n    fillRule: \"nonzero\"\n  }))));\n}\n\nexport default DownOutline;","var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React, { useRef, useEffect, useState } from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    getModules() {\n      return this.modules;\n    }\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  ];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    getData() {\n      return this.bitData.slice();\n    }\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  return { x, y, h, w, excavation };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    style,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"style\",\n    \"imageSettings\"\n  ]);\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  const _canvas = useRef(null);\n  const _image = useRef(null);\n  const [isImgLoaded, setIsImageLoaded] = useState(false);\n  useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      const margin = includeMargin ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function(row, rdx) {\n          row.forEach(function(cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  const canvasStyle = __spreadValues({ height: size, width: size }, style);\n  let img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */ React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: { display: \"none\" },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nfunction QRCodeSVG(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */ React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */ React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`,\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\nvar QRCode = (props) => {\n  const _a = props, { renderAs } = _a, otherProps = __objRest(_a, [\"renderAs\"]);\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */ React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n  return /* @__PURE__ */ React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\nexport {\n  QRCodeCanvas,\n  QRCodeSVG,\n  QRCode as default\n};\n"],"names":["props","React","Object","assign","width","height","viewBox","xmlns","xmlnsXlink","style","verticalAlign","className","filter","Boolean","join","id","stroke","strokeWidth","fill","fillRule","opacity","x","y","d","qrcodegen","qrcodegen2","__defProp","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","_step","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","__objRest","source","exclude","target","indexOf","_step2","_iterator2","_QrCode","version","errorCorrectionLevel","dataCodewords","msk","_classCallCheck","this","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","_createClass","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","length","j","drawAlignmentPattern","drawVersion","data","formatBits","rem","bits","getBit","color","Math","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","ecl","getNumDataCodewords","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","_loop","_i9","forEach","block","right","vert","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","_step3","dark","_iterator3","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","core","currentRunColor","currentRunLength","pop","unshift","text","segs","QrSegment","makeSegments","encodeSegments","seg","makeBytes","dataUsedBits","minVersion","arguments","undefined","maxVersion","boostEcl","dataCapacityBits2","usedBits","getTotalBits","_i10","_arr","Ecc","MEDIUM","QUARTILE","HIGH","newEcl","_step4","bb","_iterator4","appendBits","mode","modeBits","numChars","numCharCountBits","_step5","_iterator5","getData","dataCapacityBits","min","padByte","degree","root","reedSolomonMultiply","divisor","_step6","map","_","_iterator6","_loop2","factor","shift","coef","z","QrCode","val","len","cond","_QrSegment","bitData","_step7","_iterator7","Mode","BYTE","digits","isNumeric","parseInt","substr","NUMERIC","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","makeNumeric","makeAlphanumeric","toUtf8ByteArray","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","_step8","_iterator8","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","MARGIN_SIZE","DEFAULT_IMG_SCALE","generatePath","margin","ops","start","cell","excavateModules","excavation","h","w","getImageSettings","cells","includeMargin","imageSettings","numCells","defaultSize","scale","excavate","floorX","floorY","SUPPORTS_PATH2D","Path2D","addPath","QRCodeCanvas","_a","_a$size","_a$level","level","_a$bgColor","bgColor","_a$fgColor","fgColor","_a$includeMargin","otherProps","imgSrc","src","_canvas","useRef","_image","_useState","useState","_useState2","_slicedToArray","setIsImageLoaded","useEffect","current","canvas","ctx","getContext","encodeText","getModules","calculatedImageSettings","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","rdx","cdx","drawImage","canvasStyle","img","display","onLoad","ref","QRCodeSVG","_a$size2","_a$level2","_a$bgColor2","_a$fgColor2","_a$includeMargin2","xlinkHref","preserveAspectRatio","fgPath","shapeRendering","QRCode","renderAs"],"sourceRoot":""}